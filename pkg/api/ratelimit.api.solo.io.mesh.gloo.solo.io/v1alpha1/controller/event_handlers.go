// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/ratelimit.api.solo.io.mesh.gloo.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the RateLimiterConfig Resource
// DEPRECATED: Prefer reconciler pattern.
type RateLimiterConfigEventHandler interface {
	CreateRateLimiterConfig(obj *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) error
	UpdateRateLimiterConfig(old, new *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) error
	DeleteRateLimiterConfig(obj *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) error
	GenericRateLimiterConfig(obj *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) error
}

type RateLimiterConfigEventHandlerFuncs struct {
	OnCreate  func(obj *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) error
	OnUpdate  func(old, new *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) error
	OnDelete  func(obj *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) error
	OnGeneric func(obj *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) error
}

func (f *RateLimiterConfigEventHandlerFuncs) CreateRateLimiterConfig(obj *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *RateLimiterConfigEventHandlerFuncs) DeleteRateLimiterConfig(obj *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *RateLimiterConfigEventHandlerFuncs) UpdateRateLimiterConfig(objOld, objNew *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *RateLimiterConfigEventHandlerFuncs) GenericRateLimiterConfig(obj *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type RateLimiterConfigEventWatcher interface {
	AddEventHandler(ctx context.Context, h RateLimiterConfigEventHandler, predicates ...predicate.Predicate) error
}

type rateLimiterConfigEventWatcher struct {
	watcher events.EventWatcher
}

func NewRateLimiterConfigEventWatcher(name string, mgr manager.Manager) RateLimiterConfigEventWatcher {
	return &rateLimiterConfigEventWatcher{
		watcher: events.NewWatcher(name, mgr, &ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig{}),
	}
}

func (c *rateLimiterConfigEventWatcher) AddEventHandler(ctx context.Context, h RateLimiterConfigEventHandler, predicates ...predicate.Predicate) error {
	handler := genericRateLimiterConfigHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericRateLimiterConfigHandler implements a generic events.EventHandler
type genericRateLimiterConfigHandler struct {
	handler RateLimiterConfigEventHandler
}

func (h genericRateLimiterConfigHandler) Create(object client.Object) error {
	obj, ok := object.(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig)
	if !ok {
		return errors.Errorf("internal error: RateLimiterConfig handler received event for %T", object)
	}
	return h.handler.CreateRateLimiterConfig(obj)
}

func (h genericRateLimiterConfigHandler) Delete(object client.Object) error {
	obj, ok := object.(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig)
	if !ok {
		return errors.Errorf("internal error: RateLimiterConfig handler received event for %T", object)
	}
	return h.handler.DeleteRateLimiterConfig(obj)
}

func (h genericRateLimiterConfigHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig)
	if !ok {
		return errors.Errorf("internal error: RateLimiterConfig handler received event for %T", old)
	}
	objNew, ok := new.(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig)
	if !ok {
		return errors.Errorf("internal error: RateLimiterConfig handler received event for %T", new)
	}
	return h.handler.UpdateRateLimiterConfig(objOld, objNew)
}

func (h genericRateLimiterConfigHandler) Generic(object client.Object) error {
	obj, ok := object.(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig)
	if !ok {
		return errors.Errorf("internal error: RateLimiterConfig handler received event for %T", object)
	}
	return h.handler.GenericRateLimiterConfig(obj)
}

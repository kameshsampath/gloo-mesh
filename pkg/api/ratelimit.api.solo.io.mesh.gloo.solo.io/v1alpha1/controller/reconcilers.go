// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/ratelimit.api.solo.io.mesh.gloo.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the RateLimiterConfig Resource.
// implemented by the user
type RateLimiterConfigReconciler interface {
	ReconcileRateLimiterConfig(obj *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) (reconcile.Result, error)
}

// Reconcile deletion events for the RateLimiterConfig Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type RateLimiterConfigDeletionReconciler interface {
	ReconcileRateLimiterConfigDeletion(req reconcile.Request) error
}

type RateLimiterConfigReconcilerFuncs struct {
	OnReconcileRateLimiterConfig         func(obj *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) (reconcile.Result, error)
	OnReconcileRateLimiterConfigDeletion func(req reconcile.Request) error
}

func (f *RateLimiterConfigReconcilerFuncs) ReconcileRateLimiterConfig(obj *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) (reconcile.Result, error) {
	if f.OnReconcileRateLimiterConfig == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileRateLimiterConfig(obj)
}

func (f *RateLimiterConfigReconcilerFuncs) ReconcileRateLimiterConfigDeletion(req reconcile.Request) error {
	if f.OnReconcileRateLimiterConfigDeletion == nil {
		return nil
	}
	return f.OnReconcileRateLimiterConfigDeletion(req)
}

// Reconcile and finalize the RateLimiterConfig Resource
// implemented by the user
type RateLimiterConfigFinalizer interface {
	RateLimiterConfigReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	RateLimiterConfigFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeRateLimiterConfig(obj *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) error
}

type RateLimiterConfigReconcileLoop interface {
	RunRateLimiterConfigReconciler(ctx context.Context, rec RateLimiterConfigReconciler, predicates ...predicate.Predicate) error
}

type rateLimiterConfigReconcileLoop struct {
	loop reconcile.Loop
}

func NewRateLimiterConfigReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) RateLimiterConfigReconcileLoop {
	return &rateLimiterConfigReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig{}, options),
	}
}

func (c *rateLimiterConfigReconcileLoop) RunRateLimiterConfigReconciler(ctx context.Context, reconciler RateLimiterConfigReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericRateLimiterConfigReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(RateLimiterConfigFinalizer); ok {
		reconcilerWrapper = genericRateLimiterConfigFinalizer{
			genericRateLimiterConfigReconciler: genericReconciler,
			finalizingReconciler:               finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericRateLimiterConfigHandler implements a generic reconcile.Reconciler
type genericRateLimiterConfigReconciler struct {
	reconciler RateLimiterConfigReconciler
}

func (r genericRateLimiterConfigReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: RateLimiterConfig handler received event for %T", object)
	}
	return r.reconciler.ReconcileRateLimiterConfig(obj)
}

func (r genericRateLimiterConfigReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(RateLimiterConfigDeletionReconciler); ok {
		return deletionReconciler.ReconcileRateLimiterConfigDeletion(request)
	}
	return nil
}

// genericRateLimiterConfigFinalizer implements a generic reconcile.FinalizingReconciler
type genericRateLimiterConfigFinalizer struct {
	genericRateLimiterConfigReconciler
	finalizingReconciler RateLimiterConfigFinalizer
}

func (r genericRateLimiterConfigFinalizer) FinalizerName() string {
	return r.finalizingReconciler.RateLimiterConfigFinalizerName()
}

func (r genericRateLimiterConfigFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig)
	if !ok {
		return errors.Errorf("internal error: RateLimiterConfig handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeRateLimiterConfig(obj)
}

// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/ratelimit.api.solo.io.mesh.gloo.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the RateLimiterConfig Resource across clusters.
// implemented by the user
type MulticlusterRateLimiterConfigReconciler interface {
	ReconcileRateLimiterConfig(clusterName string, obj *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) (reconcile.Result, error)
}

// Reconcile deletion events for the RateLimiterConfig Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterRateLimiterConfigDeletionReconciler interface {
	ReconcileRateLimiterConfigDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterRateLimiterConfigReconcilerFuncs struct {
	OnReconcileRateLimiterConfig         func(clusterName string, obj *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) (reconcile.Result, error)
	OnReconcileRateLimiterConfigDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterRateLimiterConfigReconcilerFuncs) ReconcileRateLimiterConfig(clusterName string, obj *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) (reconcile.Result, error) {
	if f.OnReconcileRateLimiterConfig == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileRateLimiterConfig(clusterName, obj)
}

func (f *MulticlusterRateLimiterConfigReconcilerFuncs) ReconcileRateLimiterConfigDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileRateLimiterConfigDeletion == nil {
		return nil
	}
	return f.OnReconcileRateLimiterConfigDeletion(clusterName, req)
}

type MulticlusterRateLimiterConfigReconcileLoop interface {
	// AddMulticlusterRateLimiterConfigReconciler adds a MulticlusterRateLimiterConfigReconciler to the MulticlusterRateLimiterConfigReconcileLoop.
	AddMulticlusterRateLimiterConfigReconciler(ctx context.Context, rec MulticlusterRateLimiterConfigReconciler, predicates ...predicate.Predicate)
}

type multiclusterRateLimiterConfigReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterRateLimiterConfigReconcileLoop) AddMulticlusterRateLimiterConfigReconciler(ctx context.Context, rec MulticlusterRateLimiterConfigReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericRateLimiterConfigMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterRateLimiterConfigReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterRateLimiterConfigReconcileLoop {
	return &multiclusterRateLimiterConfigReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig{}, options)}
}

type genericRateLimiterConfigMulticlusterReconciler struct {
	reconciler MulticlusterRateLimiterConfigReconciler
}

func (g genericRateLimiterConfigMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterRateLimiterConfigDeletionReconciler); ok {
		return deletionReconciler.ReconcileRateLimiterConfigDeletion(cluster, req)
	}
	return nil
}

func (g genericRateLimiterConfigMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: RateLimiterConfig handler received event for %T", object)
	}
	return g.reconciler.ReconcileRateLimiterConfig(cluster, obj)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/ratelimit.api.solo.io.mesh.gloo.solo.io/v1alpha1"
	controller "github.com/solo-io/gloo-mesh/pkg/api/ratelimit.api.solo.io.mesh.gloo.solo.io/v1alpha1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockRateLimiterConfigReconciler is a mock of RateLimiterConfigReconciler interface.
type MockRateLimiterConfigReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterConfigReconcilerMockRecorder
}

// MockRateLimiterConfigReconcilerMockRecorder is the mock recorder for MockRateLimiterConfigReconciler.
type MockRateLimiterConfigReconcilerMockRecorder struct {
	mock *MockRateLimiterConfigReconciler
}

// NewMockRateLimiterConfigReconciler creates a new mock instance.
func NewMockRateLimiterConfigReconciler(ctrl *gomock.Controller) *MockRateLimiterConfigReconciler {
	mock := &MockRateLimiterConfigReconciler{ctrl: ctrl}
	mock.recorder = &MockRateLimiterConfigReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiterConfigReconciler) EXPECT() *MockRateLimiterConfigReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigReconciler) ReconcileRateLimiterConfig(obj *v1alpha1.RateLimiterConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRateLimiterConfig", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRateLimiterConfig indicates an expected call of ReconcileRateLimiterConfig.
func (mr *MockRateLimiterConfigReconcilerMockRecorder) ReconcileRateLimiterConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigReconciler)(nil).ReconcileRateLimiterConfig), obj)
}

// MockRateLimiterConfigDeletionReconciler is a mock of RateLimiterConfigDeletionReconciler interface.
type MockRateLimiterConfigDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterConfigDeletionReconcilerMockRecorder
}

// MockRateLimiterConfigDeletionReconcilerMockRecorder is the mock recorder for MockRateLimiterConfigDeletionReconciler.
type MockRateLimiterConfigDeletionReconcilerMockRecorder struct {
	mock *MockRateLimiterConfigDeletionReconciler
}

// NewMockRateLimiterConfigDeletionReconciler creates a new mock instance.
func NewMockRateLimiterConfigDeletionReconciler(ctrl *gomock.Controller) *MockRateLimiterConfigDeletionReconciler {
	mock := &MockRateLimiterConfigDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockRateLimiterConfigDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiterConfigDeletionReconciler) EXPECT() *MockRateLimiterConfigDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRateLimiterConfigDeletion mocks base method.
func (m *MockRateLimiterConfigDeletionReconciler) ReconcileRateLimiterConfigDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRateLimiterConfigDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileRateLimiterConfigDeletion indicates an expected call of ReconcileRateLimiterConfigDeletion.
func (mr *MockRateLimiterConfigDeletionReconcilerMockRecorder) ReconcileRateLimiterConfigDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRateLimiterConfigDeletion", reflect.TypeOf((*MockRateLimiterConfigDeletionReconciler)(nil).ReconcileRateLimiterConfigDeletion), req)
}

// MockRateLimiterConfigFinalizer is a mock of RateLimiterConfigFinalizer interface.
type MockRateLimiterConfigFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterConfigFinalizerMockRecorder
}

// MockRateLimiterConfigFinalizerMockRecorder is the mock recorder for MockRateLimiterConfigFinalizer.
type MockRateLimiterConfigFinalizerMockRecorder struct {
	mock *MockRateLimiterConfigFinalizer
}

// NewMockRateLimiterConfigFinalizer creates a new mock instance.
func NewMockRateLimiterConfigFinalizer(ctrl *gomock.Controller) *MockRateLimiterConfigFinalizer {
	mock := &MockRateLimiterConfigFinalizer{ctrl: ctrl}
	mock.recorder = &MockRateLimiterConfigFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiterConfigFinalizer) EXPECT() *MockRateLimiterConfigFinalizerMockRecorder {
	return m.recorder
}

// FinalizeRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigFinalizer) FinalizeRateLimiterConfig(obj *v1alpha1.RateLimiterConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeRateLimiterConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeRateLimiterConfig indicates an expected call of FinalizeRateLimiterConfig.
func (mr *MockRateLimiterConfigFinalizerMockRecorder) FinalizeRateLimiterConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigFinalizer)(nil).FinalizeRateLimiterConfig), obj)
}

// RateLimiterConfigFinalizerName mocks base method.
func (m *MockRateLimiterConfigFinalizer) RateLimiterConfigFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateLimiterConfigFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// RateLimiterConfigFinalizerName indicates an expected call of RateLimiterConfigFinalizerName.
func (mr *MockRateLimiterConfigFinalizerMockRecorder) RateLimiterConfigFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateLimiterConfigFinalizerName", reflect.TypeOf((*MockRateLimiterConfigFinalizer)(nil).RateLimiterConfigFinalizerName))
}

// ReconcileRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigFinalizer) ReconcileRateLimiterConfig(obj *v1alpha1.RateLimiterConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRateLimiterConfig", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRateLimiterConfig indicates an expected call of ReconcileRateLimiterConfig.
func (mr *MockRateLimiterConfigFinalizerMockRecorder) ReconcileRateLimiterConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigFinalizer)(nil).ReconcileRateLimiterConfig), obj)
}

// MockRateLimiterConfigReconcileLoop is a mock of RateLimiterConfigReconcileLoop interface.
type MockRateLimiterConfigReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterConfigReconcileLoopMockRecorder
}

// MockRateLimiterConfigReconcileLoopMockRecorder is the mock recorder for MockRateLimiterConfigReconcileLoop.
type MockRateLimiterConfigReconcileLoopMockRecorder struct {
	mock *MockRateLimiterConfigReconcileLoop
}

// NewMockRateLimiterConfigReconcileLoop creates a new mock instance.
func NewMockRateLimiterConfigReconcileLoop(ctrl *gomock.Controller) *MockRateLimiterConfigReconcileLoop {
	mock := &MockRateLimiterConfigReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockRateLimiterConfigReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiterConfigReconcileLoop) EXPECT() *MockRateLimiterConfigReconcileLoopMockRecorder {
	return m.recorder
}

// RunRateLimiterConfigReconciler mocks base method.
func (m *MockRateLimiterConfigReconcileLoop) RunRateLimiterConfigReconciler(ctx context.Context, rec controller.RateLimiterConfigReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunRateLimiterConfigReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunRateLimiterConfigReconciler indicates an expected call of RunRateLimiterConfigReconciler.
func (mr *MockRateLimiterConfigReconcileLoopMockRecorder) RunRateLimiterConfigReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRateLimiterConfigReconciler", reflect.TypeOf((*MockRateLimiterConfigReconcileLoop)(nil).RunRateLimiterConfigReconciler), varargs...)
}

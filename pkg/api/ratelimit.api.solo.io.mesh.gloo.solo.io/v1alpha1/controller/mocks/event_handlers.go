// Code generated by MockGen. DO NOT EDIT.
// Source: ./event_handlers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/ratelimit.api.solo.io.mesh.gloo.solo.io/v1alpha1"
	controller "github.com/solo-io/gloo-mesh/pkg/api/ratelimit.api.solo.io.mesh.gloo.solo.io/v1alpha1/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockRateLimiterConfigEventHandler is a mock of RateLimiterConfigEventHandler interface.
type MockRateLimiterConfigEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterConfigEventHandlerMockRecorder
}

// MockRateLimiterConfigEventHandlerMockRecorder is the mock recorder for MockRateLimiterConfigEventHandler.
type MockRateLimiterConfigEventHandlerMockRecorder struct {
	mock *MockRateLimiterConfigEventHandler
}

// NewMockRateLimiterConfigEventHandler creates a new mock instance.
func NewMockRateLimiterConfigEventHandler(ctrl *gomock.Controller) *MockRateLimiterConfigEventHandler {
	mock := &MockRateLimiterConfigEventHandler{ctrl: ctrl}
	mock.recorder = &MockRateLimiterConfigEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiterConfigEventHandler) EXPECT() *MockRateLimiterConfigEventHandlerMockRecorder {
	return m.recorder
}

// CreateRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigEventHandler) CreateRateLimiterConfig(obj *v1alpha1.RateLimiterConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRateLimiterConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRateLimiterConfig indicates an expected call of CreateRateLimiterConfig.
func (mr *MockRateLimiterConfigEventHandlerMockRecorder) CreateRateLimiterConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigEventHandler)(nil).CreateRateLimiterConfig), obj)
}

// DeleteRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigEventHandler) DeleteRateLimiterConfig(obj *v1alpha1.RateLimiterConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRateLimiterConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRateLimiterConfig indicates an expected call of DeleteRateLimiterConfig.
func (mr *MockRateLimiterConfigEventHandlerMockRecorder) DeleteRateLimiterConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigEventHandler)(nil).DeleteRateLimiterConfig), obj)
}

// GenericRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigEventHandler) GenericRateLimiterConfig(obj *v1alpha1.RateLimiterConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericRateLimiterConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenericRateLimiterConfig indicates an expected call of GenericRateLimiterConfig.
func (mr *MockRateLimiterConfigEventHandlerMockRecorder) GenericRateLimiterConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigEventHandler)(nil).GenericRateLimiterConfig), obj)
}

// UpdateRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigEventHandler) UpdateRateLimiterConfig(old, new *v1alpha1.RateLimiterConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRateLimiterConfig", old, new)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRateLimiterConfig indicates an expected call of UpdateRateLimiterConfig.
func (mr *MockRateLimiterConfigEventHandlerMockRecorder) UpdateRateLimiterConfig(old, new interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigEventHandler)(nil).UpdateRateLimiterConfig), old, new)
}

// MockRateLimiterConfigEventWatcher is a mock of RateLimiterConfigEventWatcher interface.
type MockRateLimiterConfigEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterConfigEventWatcherMockRecorder
}

// MockRateLimiterConfigEventWatcherMockRecorder is the mock recorder for MockRateLimiterConfigEventWatcher.
type MockRateLimiterConfigEventWatcherMockRecorder struct {
	mock *MockRateLimiterConfigEventWatcher
}

// NewMockRateLimiterConfigEventWatcher creates a new mock instance.
func NewMockRateLimiterConfigEventWatcher(ctrl *gomock.Controller) *MockRateLimiterConfigEventWatcher {
	mock := &MockRateLimiterConfigEventWatcher{ctrl: ctrl}
	mock.recorder = &MockRateLimiterConfigEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiterConfigEventWatcher) EXPECT() *MockRateLimiterConfigEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockRateLimiterConfigEventWatcher) AddEventHandler(ctx context.Context, h controller.RateLimiterConfigEventHandler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, h}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockRateLimiterConfigEventWatcherMockRecorder) AddEventHandler(ctx, h interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, h}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockRateLimiterConfigEventWatcher)(nil).AddEventHandler), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/ratelimit.api.solo.io.mesh.gloo.solo.io/v1alpha1"
	controller "github.com/solo-io/gloo-mesh/pkg/api/ratelimit.api.solo.io.mesh.gloo.solo.io/v1alpha1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterRateLimiterConfigReconciler is a mock of MulticlusterRateLimiterConfigReconciler interface.
type MockMulticlusterRateLimiterConfigReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRateLimiterConfigReconcilerMockRecorder
}

// MockMulticlusterRateLimiterConfigReconcilerMockRecorder is the mock recorder for MockMulticlusterRateLimiterConfigReconciler.
type MockMulticlusterRateLimiterConfigReconcilerMockRecorder struct {
	mock *MockMulticlusterRateLimiterConfigReconciler
}

// NewMockMulticlusterRateLimiterConfigReconciler creates a new mock instance.
func NewMockMulticlusterRateLimiterConfigReconciler(ctrl *gomock.Controller) *MockMulticlusterRateLimiterConfigReconciler {
	mock := &MockMulticlusterRateLimiterConfigReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRateLimiterConfigReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRateLimiterConfigReconciler) EXPECT() *MockMulticlusterRateLimiterConfigReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRateLimiterConfig mocks base method.
func (m *MockMulticlusterRateLimiterConfigReconciler) ReconcileRateLimiterConfig(clusterName string, obj *v1alpha1.RateLimiterConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRateLimiterConfig", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileRateLimiterConfig indicates an expected call of ReconcileRateLimiterConfig.
func (mr *MockMulticlusterRateLimiterConfigReconcilerMockRecorder) ReconcileRateLimiterConfig(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRateLimiterConfig", reflect.TypeOf((*MockMulticlusterRateLimiterConfigReconciler)(nil).ReconcileRateLimiterConfig), clusterName, obj)
}

// MockMulticlusterRateLimiterConfigDeletionReconciler is a mock of MulticlusterRateLimiterConfigDeletionReconciler interface.
type MockMulticlusterRateLimiterConfigDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRateLimiterConfigDeletionReconcilerMockRecorder
}

// MockMulticlusterRateLimiterConfigDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterRateLimiterConfigDeletionReconciler.
type MockMulticlusterRateLimiterConfigDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterRateLimiterConfigDeletionReconciler
}

// NewMockMulticlusterRateLimiterConfigDeletionReconciler creates a new mock instance.
func NewMockMulticlusterRateLimiterConfigDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterRateLimiterConfigDeletionReconciler {
	mock := &MockMulticlusterRateLimiterConfigDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRateLimiterConfigDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRateLimiterConfigDeletionReconciler) EXPECT() *MockMulticlusterRateLimiterConfigDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileRateLimiterConfigDeletion mocks base method.
func (m *MockMulticlusterRateLimiterConfigDeletionReconciler) ReconcileRateLimiterConfigDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileRateLimiterConfigDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileRateLimiterConfigDeletion indicates an expected call of ReconcileRateLimiterConfigDeletion.
func (mr *MockMulticlusterRateLimiterConfigDeletionReconcilerMockRecorder) ReconcileRateLimiterConfigDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileRateLimiterConfigDeletion", reflect.TypeOf((*MockMulticlusterRateLimiterConfigDeletionReconciler)(nil).ReconcileRateLimiterConfigDeletion), clusterName, req)
}

// MockMulticlusterRateLimiterConfigReconcileLoop is a mock of MulticlusterRateLimiterConfigReconcileLoop interface.
type MockMulticlusterRateLimiterConfigReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRateLimiterConfigReconcileLoopMockRecorder
}

// MockMulticlusterRateLimiterConfigReconcileLoopMockRecorder is the mock recorder for MockMulticlusterRateLimiterConfigReconcileLoop.
type MockMulticlusterRateLimiterConfigReconcileLoopMockRecorder struct {
	mock *MockMulticlusterRateLimiterConfigReconcileLoop
}

// NewMockMulticlusterRateLimiterConfigReconcileLoop creates a new mock instance.
func NewMockMulticlusterRateLimiterConfigReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterRateLimiterConfigReconcileLoop {
	mock := &MockMulticlusterRateLimiterConfigReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRateLimiterConfigReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRateLimiterConfigReconcileLoop) EXPECT() *MockMulticlusterRateLimiterConfigReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterRateLimiterConfigReconciler mocks base method.
func (m *MockMulticlusterRateLimiterConfigReconcileLoop) AddMulticlusterRateLimiterConfigReconciler(ctx context.Context, rec controller.MulticlusterRateLimiterConfigReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterRateLimiterConfigReconciler", varargs...)
}

// AddMulticlusterRateLimiterConfigReconciler indicates an expected call of AddMulticlusterRateLimiterConfigReconciler.
func (mr *MockMulticlusterRateLimiterConfigReconcileLoopMockRecorder) AddMulticlusterRateLimiterConfigReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterRateLimiterConfigReconciler", reflect.TypeOf((*MockMulticlusterRateLimiterConfigReconcileLoop)(nil).AddMulticlusterRateLimiterConfigReconciler), varargs...)
}

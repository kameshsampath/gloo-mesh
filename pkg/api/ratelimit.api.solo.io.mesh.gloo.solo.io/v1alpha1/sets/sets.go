// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./sets.go -destination mocks/sets.go

package v1alpha1sets

import (
	ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/ratelimit.api.solo.io.mesh.gloo.solo.io/v1alpha1"

	"github.com/rotisserie/eris"
	sksets "github.com/solo-io/skv2/contrib/pkg/sets"
	"github.com/solo-io/skv2/pkg/ezkube"
	"k8s.io/apimachinery/pkg/util/sets"
)

type RateLimiterConfigSet interface {
	// Get the set stored keys
	Keys() sets.String
	// List of resources stored in the set. Pass an optional filter function to filter on the list.
	List(filterResource ...func(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) bool) []*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig
	// Unsorted list of resources stored in the set. Pass an optional filter function to filter on the list.
	UnsortedList(filterResource ...func(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) bool) []*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig
	// Return the Set as a map of key to resource.
	Map() map[string]*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig
	// Insert a resource into the set.
	Insert(rateLimiterConfig ...*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig)
	// Compare the equality of the keys in two sets (not the resources themselves)
	Equal(rateLimiterConfigSet RateLimiterConfigSet) bool
	// Check if the set contains a key matching the resource (not the resource itself)
	Has(rateLimiterConfig ezkube.ResourceId) bool
	// Delete the key matching the resource
	Delete(rateLimiterConfig ezkube.ResourceId)
	// Return the union with the provided set
	Union(set RateLimiterConfigSet) RateLimiterConfigSet
	// Return the difference with the provided set
	Difference(set RateLimiterConfigSet) RateLimiterConfigSet
	// Return the intersection with the provided set
	Intersection(set RateLimiterConfigSet) RateLimiterConfigSet
	// Find the resource with the given ID
	Find(id ezkube.ResourceId) (*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig, error)
	// Get the length of the set
	Length() int
	// returns the generic implementation of the set
	Generic() sksets.ResourceSet
	// returns the delta between this and and another RateLimiterConfigSet
	Delta(newSet RateLimiterConfigSet) sksets.ResourceDelta
}

func makeGenericRateLimiterConfigSet(rateLimiterConfigList []*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) sksets.ResourceSet {
	var genericResources []ezkube.ResourceId
	for _, obj := range rateLimiterConfigList {
		genericResources = append(genericResources, obj)
	}
	return sksets.NewResourceSet(genericResources...)
}

type rateLimiterConfigSet struct {
	set sksets.ResourceSet
}

func NewRateLimiterConfigSet(rateLimiterConfigList ...*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) RateLimiterConfigSet {
	return &rateLimiterConfigSet{set: makeGenericRateLimiterConfigSet(rateLimiterConfigList)}
}

func NewRateLimiterConfigSetFromList(rateLimiterConfigList *ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfigList) RateLimiterConfigSet {
	list := make([]*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig, 0, len(rateLimiterConfigList.Items))
	for idx := range rateLimiterConfigList.Items {
		list = append(list, &rateLimiterConfigList.Items[idx])
	}
	return &rateLimiterConfigSet{set: makeGenericRateLimiterConfigSet(list)}
}

func (s *rateLimiterConfigSet) Keys() sets.String {
	if s == nil {
		return sets.String{}
	}
	return s.Generic().Keys()
}

func (s *rateLimiterConfigSet) List(filterResource ...func(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) bool) []*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig))
		})
	}

	objs := s.Generic().List(genericFilters...)
	rateLimiterConfigList := make([]*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig, 0, len(objs))
	for _, obj := range objs {
		rateLimiterConfigList = append(rateLimiterConfigList, obj.(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig))
	}
	return rateLimiterConfigList
}

func (s *rateLimiterConfigSet) UnsortedList(filterResource ...func(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig) bool) []*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig {
	if s == nil {
		return nil
	}
	var genericFilters []func(ezkube.ResourceId) bool
	for _, filter := range filterResource {
		genericFilters = append(genericFilters, func(obj ezkube.ResourceId) bool {
			return filter(obj.(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig))
		})
	}

	var rateLimiterConfigList []*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig
	for _, obj := range s.Generic().UnsortedList(genericFilters...) {
		rateLimiterConfigList = append(rateLimiterConfigList, obj.(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig))
	}
	return rateLimiterConfigList
}

func (s *rateLimiterConfigSet) Map() map[string]*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig {
	if s == nil {
		return nil
	}

	newMap := map[string]*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig{}
	for k, v := range s.Generic().Map() {
		newMap[k] = v.(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig)
	}
	return newMap
}

func (s *rateLimiterConfigSet) Insert(
	rateLimiterConfigList ...*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig,
) {
	if s == nil {
		panic("cannot insert into nil set")
	}

	for _, obj := range rateLimiterConfigList {
		s.Generic().Insert(obj)
	}
}

func (s *rateLimiterConfigSet) Has(rateLimiterConfig ezkube.ResourceId) bool {
	if s == nil {
		return false
	}
	return s.Generic().Has(rateLimiterConfig)
}

func (s *rateLimiterConfigSet) Equal(
	rateLimiterConfigSet RateLimiterConfigSet,
) bool {
	if s == nil {
		return rateLimiterConfigSet == nil
	}
	return s.Generic().Equal(rateLimiterConfigSet.Generic())
}

func (s *rateLimiterConfigSet) Delete(RateLimiterConfig ezkube.ResourceId) {
	if s == nil {
		return
	}
	s.Generic().Delete(RateLimiterConfig)
}

func (s *rateLimiterConfigSet) Union(set RateLimiterConfigSet) RateLimiterConfigSet {
	if s == nil {
		return set
	}
	return NewRateLimiterConfigSet(append(s.List(), set.List()...)...)
}

func (s *rateLimiterConfigSet) Difference(set RateLimiterConfigSet) RateLimiterConfigSet {
	if s == nil {
		return set
	}
	newSet := s.Generic().Difference(set.Generic())
	return &rateLimiterConfigSet{set: newSet}
}

func (s *rateLimiterConfigSet) Intersection(set RateLimiterConfigSet) RateLimiterConfigSet {
	if s == nil {
		return nil
	}
	newSet := s.Generic().Intersection(set.Generic())
	var rateLimiterConfigList []*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig
	for _, obj := range newSet.List() {
		rateLimiterConfigList = append(rateLimiterConfigList, obj.(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig))
	}
	return NewRateLimiterConfigSet(rateLimiterConfigList...)
}

func (s *rateLimiterConfigSet) Find(id ezkube.ResourceId) (*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig, error) {
	if s == nil {
		return nil, eris.Errorf("empty set, cannot find RateLimiterConfig %v", sksets.Key(id))
	}
	obj, err := s.Generic().Find(&ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig{}, id)
	if err != nil {
		return nil, err
	}

	return obj.(*ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfig), nil
}

func (s *rateLimiterConfigSet) Length() int {
	if s == nil {
		return 0
	}
	return s.Generic().Length()
}

func (s *rateLimiterConfigSet) Generic() sksets.ResourceSet {
	if s == nil {
		return nil
	}
	return s.set
}

func (s *rateLimiterConfigSet) Delta(newSet RateLimiterConfigSet) sksets.ResourceDelta {
	if s == nil {
		return sksets.ResourceDelta{
			Inserted: newSet.Generic(),
		}
	}
	return s.Generic().Delta(newSet.Generic())
}

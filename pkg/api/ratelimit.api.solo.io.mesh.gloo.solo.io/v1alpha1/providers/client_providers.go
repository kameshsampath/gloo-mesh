// Code generated by skv2. DO NOT EDIT.

package v1alpha1

import (
	ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/ratelimit.api.solo.io.mesh.gloo.solo.io/v1alpha1"

	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

/*
  The intention of these providers are to be used for Mocking.
  They expose the Clients as interfaces, as well as factories to provide mocked versions
  of the clients when they require building within a component.

  See package `github.com/solo-io/skv2/pkg/multicluster/register` for example
*/

// Provider for RateLimiterConfigClient from Clientset
func RateLimiterConfigClientFromClientsetProvider(clients ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.Clientset) ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfigClient {
	return clients.RateLimiterConfigs()
}

// Provider for RateLimiterConfig Client from Client
func RateLimiterConfigClientProvider(client client.Client) ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfigClient {
	return ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.NewRateLimiterConfigClient(client)
}

type RateLimiterConfigClientFactory func(client client.Client) ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfigClient

func RateLimiterConfigClientFactoryProvider() RateLimiterConfigClientFactory {
	return RateLimiterConfigClientProvider
}

type RateLimiterConfigClientFromConfigFactory func(cfg *rest.Config) (ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfigClient, error)

func RateLimiterConfigClientFromConfigFactoryProvider() RateLimiterConfigClientFromConfigFactory {
	return func(cfg *rest.Config) (ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.RateLimiterConfigClient, error) {
		clients, err := ratelimit_api_solo_io_mesh_gloo_solo_io_v1alpha1.NewClientsetFromConfig(cfg)
		if err != nil {
			return nil, err
		}
		return clients.RateLimiterConfigs(), nil
	}
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1alpha1 is a generated GoMock package.
package mock_v1alpha1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/gloo-mesh/pkg/api/ratelimit.api.solo.io.mesh.gloo.solo.io/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1alpha1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// RateLimiterConfigs mocks base method.
func (m *MockClientset) RateLimiterConfigs() v1alpha1.RateLimiterConfigClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateLimiterConfigs")
	ret0, _ := ret[0].(v1alpha1.RateLimiterConfigClient)
	return ret0
}

// RateLimiterConfigs indicates an expected call of RateLimiterConfigs.
func (mr *MockClientsetMockRecorder) RateLimiterConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateLimiterConfigs", reflect.TypeOf((*MockClientset)(nil).RateLimiterConfigs))
}

// MockRateLimiterConfigReader is a mock of RateLimiterConfigReader interface.
type MockRateLimiterConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterConfigReaderMockRecorder
}

// MockRateLimiterConfigReaderMockRecorder is the mock recorder for MockRateLimiterConfigReader.
type MockRateLimiterConfigReaderMockRecorder struct {
	mock *MockRateLimiterConfigReader
}

// NewMockRateLimiterConfigReader creates a new mock instance.
func NewMockRateLimiterConfigReader(ctrl *gomock.Controller) *MockRateLimiterConfigReader {
	mock := &MockRateLimiterConfigReader{ctrl: ctrl}
	mock.recorder = &MockRateLimiterConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiterConfigReader) EXPECT() *MockRateLimiterConfigReaderMockRecorder {
	return m.recorder
}

// GetRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigReader) GetRateLimiterConfig(ctx context.Context, key client.ObjectKey) (*v1alpha1.RateLimiterConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimiterConfig", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.RateLimiterConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateLimiterConfig indicates an expected call of GetRateLimiterConfig.
func (mr *MockRateLimiterConfigReaderMockRecorder) GetRateLimiterConfig(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigReader)(nil).GetRateLimiterConfig), ctx, key)
}

// ListRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigReader) ListRateLimiterConfig(ctx context.Context, opts ...client.ListOption) (*v1alpha1.RateLimiterConfigList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRateLimiterConfig", varargs...)
	ret0, _ := ret[0].(*v1alpha1.RateLimiterConfigList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRateLimiterConfig indicates an expected call of ListRateLimiterConfig.
func (mr *MockRateLimiterConfigReaderMockRecorder) ListRateLimiterConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigReader)(nil).ListRateLimiterConfig), varargs...)
}

// MockRateLimiterConfigWriter is a mock of RateLimiterConfigWriter interface.
type MockRateLimiterConfigWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterConfigWriterMockRecorder
}

// MockRateLimiterConfigWriterMockRecorder is the mock recorder for MockRateLimiterConfigWriter.
type MockRateLimiterConfigWriterMockRecorder struct {
	mock *MockRateLimiterConfigWriter
}

// NewMockRateLimiterConfigWriter creates a new mock instance.
func NewMockRateLimiterConfigWriter(ctrl *gomock.Controller) *MockRateLimiterConfigWriter {
	mock := &MockRateLimiterConfigWriter{ctrl: ctrl}
	mock.recorder = &MockRateLimiterConfigWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiterConfigWriter) EXPECT() *MockRateLimiterConfigWriterMockRecorder {
	return m.recorder
}

// CreateRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigWriter) CreateRateLimiterConfig(ctx context.Context, obj *v1alpha1.RateLimiterConfig, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRateLimiterConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRateLimiterConfig indicates an expected call of CreateRateLimiterConfig.
func (mr *MockRateLimiterConfigWriterMockRecorder) CreateRateLimiterConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigWriter)(nil).CreateRateLimiterConfig), varargs...)
}

// DeleteAllOfRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigWriter) DeleteAllOfRateLimiterConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRateLimiterConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRateLimiterConfig indicates an expected call of DeleteAllOfRateLimiterConfig.
func (mr *MockRateLimiterConfigWriterMockRecorder) DeleteAllOfRateLimiterConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigWriter)(nil).DeleteAllOfRateLimiterConfig), varargs...)
}

// DeleteRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigWriter) DeleteRateLimiterConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRateLimiterConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRateLimiterConfig indicates an expected call of DeleteRateLimiterConfig.
func (mr *MockRateLimiterConfigWriterMockRecorder) DeleteRateLimiterConfig(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigWriter)(nil).DeleteRateLimiterConfig), varargs...)
}

// PatchRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigWriter) PatchRateLimiterConfig(ctx context.Context, obj *v1alpha1.RateLimiterConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRateLimiterConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRateLimiterConfig indicates an expected call of PatchRateLimiterConfig.
func (mr *MockRateLimiterConfigWriterMockRecorder) PatchRateLimiterConfig(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigWriter)(nil).PatchRateLimiterConfig), varargs...)
}

// UpdateRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigWriter) UpdateRateLimiterConfig(ctx context.Context, obj *v1alpha1.RateLimiterConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRateLimiterConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRateLimiterConfig indicates an expected call of UpdateRateLimiterConfig.
func (mr *MockRateLimiterConfigWriterMockRecorder) UpdateRateLimiterConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigWriter)(nil).UpdateRateLimiterConfig), varargs...)
}

// UpsertRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigWriter) UpsertRateLimiterConfig(ctx context.Context, obj *v1alpha1.RateLimiterConfig, transitionFuncs ...v1alpha1.RateLimiterConfigTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRateLimiterConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRateLimiterConfig indicates an expected call of UpsertRateLimiterConfig.
func (mr *MockRateLimiterConfigWriterMockRecorder) UpsertRateLimiterConfig(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigWriter)(nil).UpsertRateLimiterConfig), varargs...)
}

// MockRateLimiterConfigStatusWriter is a mock of RateLimiterConfigStatusWriter interface.
type MockRateLimiterConfigStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterConfigStatusWriterMockRecorder
}

// MockRateLimiterConfigStatusWriterMockRecorder is the mock recorder for MockRateLimiterConfigStatusWriter.
type MockRateLimiterConfigStatusWriterMockRecorder struct {
	mock *MockRateLimiterConfigStatusWriter
}

// NewMockRateLimiterConfigStatusWriter creates a new mock instance.
func NewMockRateLimiterConfigStatusWriter(ctrl *gomock.Controller) *MockRateLimiterConfigStatusWriter {
	mock := &MockRateLimiterConfigStatusWriter{ctrl: ctrl}
	mock.recorder = &MockRateLimiterConfigStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiterConfigStatusWriter) EXPECT() *MockRateLimiterConfigStatusWriterMockRecorder {
	return m.recorder
}

// PatchRateLimiterConfigStatus mocks base method.
func (m *MockRateLimiterConfigStatusWriter) PatchRateLimiterConfigStatus(ctx context.Context, obj *v1alpha1.RateLimiterConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRateLimiterConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRateLimiterConfigStatus indicates an expected call of PatchRateLimiterConfigStatus.
func (mr *MockRateLimiterConfigStatusWriterMockRecorder) PatchRateLimiterConfigStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRateLimiterConfigStatus", reflect.TypeOf((*MockRateLimiterConfigStatusWriter)(nil).PatchRateLimiterConfigStatus), varargs...)
}

// UpdateRateLimiterConfigStatus mocks base method.
func (m *MockRateLimiterConfigStatusWriter) UpdateRateLimiterConfigStatus(ctx context.Context, obj *v1alpha1.RateLimiterConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRateLimiterConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRateLimiterConfigStatus indicates an expected call of UpdateRateLimiterConfigStatus.
func (mr *MockRateLimiterConfigStatusWriterMockRecorder) UpdateRateLimiterConfigStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateLimiterConfigStatus", reflect.TypeOf((*MockRateLimiterConfigStatusWriter)(nil).UpdateRateLimiterConfigStatus), varargs...)
}

// MockRateLimiterConfigClient is a mock of RateLimiterConfigClient interface.
type MockRateLimiterConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterConfigClientMockRecorder
}

// MockRateLimiterConfigClientMockRecorder is the mock recorder for MockRateLimiterConfigClient.
type MockRateLimiterConfigClientMockRecorder struct {
	mock *MockRateLimiterConfigClient
}

// NewMockRateLimiterConfigClient creates a new mock instance.
func NewMockRateLimiterConfigClient(ctrl *gomock.Controller) *MockRateLimiterConfigClient {
	mock := &MockRateLimiterConfigClient{ctrl: ctrl}
	mock.recorder = &MockRateLimiterConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiterConfigClient) EXPECT() *MockRateLimiterConfigClientMockRecorder {
	return m.recorder
}

// CreateRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigClient) CreateRateLimiterConfig(ctx context.Context, obj *v1alpha1.RateLimiterConfig, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRateLimiterConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRateLimiterConfig indicates an expected call of CreateRateLimiterConfig.
func (mr *MockRateLimiterConfigClientMockRecorder) CreateRateLimiterConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigClient)(nil).CreateRateLimiterConfig), varargs...)
}

// DeleteAllOfRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigClient) DeleteAllOfRateLimiterConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfRateLimiterConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfRateLimiterConfig indicates an expected call of DeleteAllOfRateLimiterConfig.
func (mr *MockRateLimiterConfigClientMockRecorder) DeleteAllOfRateLimiterConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigClient)(nil).DeleteAllOfRateLimiterConfig), varargs...)
}

// DeleteRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigClient) DeleteRateLimiterConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRateLimiterConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRateLimiterConfig indicates an expected call of DeleteRateLimiterConfig.
func (mr *MockRateLimiterConfigClientMockRecorder) DeleteRateLimiterConfig(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigClient)(nil).DeleteRateLimiterConfig), varargs...)
}

// GetRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigClient) GetRateLimiterConfig(ctx context.Context, key client.ObjectKey) (*v1alpha1.RateLimiterConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimiterConfig", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.RateLimiterConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRateLimiterConfig indicates an expected call of GetRateLimiterConfig.
func (mr *MockRateLimiterConfigClientMockRecorder) GetRateLimiterConfig(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigClient)(nil).GetRateLimiterConfig), ctx, key)
}

// ListRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigClient) ListRateLimiterConfig(ctx context.Context, opts ...client.ListOption) (*v1alpha1.RateLimiterConfigList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRateLimiterConfig", varargs...)
	ret0, _ := ret[0].(*v1alpha1.RateLimiterConfigList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRateLimiterConfig indicates an expected call of ListRateLimiterConfig.
func (mr *MockRateLimiterConfigClientMockRecorder) ListRateLimiterConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigClient)(nil).ListRateLimiterConfig), varargs...)
}

// PatchRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigClient) PatchRateLimiterConfig(ctx context.Context, obj *v1alpha1.RateLimiterConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRateLimiterConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRateLimiterConfig indicates an expected call of PatchRateLimiterConfig.
func (mr *MockRateLimiterConfigClientMockRecorder) PatchRateLimiterConfig(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigClient)(nil).PatchRateLimiterConfig), varargs...)
}

// PatchRateLimiterConfigStatus mocks base method.
func (m *MockRateLimiterConfigClient) PatchRateLimiterConfigStatus(ctx context.Context, obj *v1alpha1.RateLimiterConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchRateLimiterConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchRateLimiterConfigStatus indicates an expected call of PatchRateLimiterConfigStatus.
func (mr *MockRateLimiterConfigClientMockRecorder) PatchRateLimiterConfigStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRateLimiterConfigStatus", reflect.TypeOf((*MockRateLimiterConfigClient)(nil).PatchRateLimiterConfigStatus), varargs...)
}

// UpdateRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigClient) UpdateRateLimiterConfig(ctx context.Context, obj *v1alpha1.RateLimiterConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRateLimiterConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRateLimiterConfig indicates an expected call of UpdateRateLimiterConfig.
func (mr *MockRateLimiterConfigClientMockRecorder) UpdateRateLimiterConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigClient)(nil).UpdateRateLimiterConfig), varargs...)
}

// UpdateRateLimiterConfigStatus mocks base method.
func (m *MockRateLimiterConfigClient) UpdateRateLimiterConfigStatus(ctx context.Context, obj *v1alpha1.RateLimiterConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRateLimiterConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRateLimiterConfigStatus indicates an expected call of UpdateRateLimiterConfigStatus.
func (mr *MockRateLimiterConfigClientMockRecorder) UpdateRateLimiterConfigStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRateLimiterConfigStatus", reflect.TypeOf((*MockRateLimiterConfigClient)(nil).UpdateRateLimiterConfigStatus), varargs...)
}

// UpsertRateLimiterConfig mocks base method.
func (m *MockRateLimiterConfigClient) UpsertRateLimiterConfig(ctx context.Context, obj *v1alpha1.RateLimiterConfig, transitionFuncs ...v1alpha1.RateLimiterConfigTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertRateLimiterConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRateLimiterConfig indicates an expected call of UpsertRateLimiterConfig.
func (mr *MockRateLimiterConfigClientMockRecorder) UpsertRateLimiterConfig(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRateLimiterConfig", reflect.TypeOf((*MockRateLimiterConfigClient)(nil).UpsertRateLimiterConfig), varargs...)
}

// MockMulticlusterRateLimiterConfigClient is a mock of MulticlusterRateLimiterConfigClient interface.
type MockMulticlusterRateLimiterConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterRateLimiterConfigClientMockRecorder
}

// MockMulticlusterRateLimiterConfigClientMockRecorder is the mock recorder for MockMulticlusterRateLimiterConfigClient.
type MockMulticlusterRateLimiterConfigClientMockRecorder struct {
	mock *MockMulticlusterRateLimiterConfigClient
}

// NewMockMulticlusterRateLimiterConfigClient creates a new mock instance.
func NewMockMulticlusterRateLimiterConfigClient(ctrl *gomock.Controller) *MockMulticlusterRateLimiterConfigClient {
	mock := &MockMulticlusterRateLimiterConfigClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterRateLimiterConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterRateLimiterConfigClient) EXPECT() *MockMulticlusterRateLimiterConfigClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterRateLimiterConfigClient) Cluster(cluster string) (v1alpha1.RateLimiterConfigClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.RateLimiterConfigClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterRateLimiterConfigClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterRateLimiterConfigClient)(nil).Cluster), cluster)
}

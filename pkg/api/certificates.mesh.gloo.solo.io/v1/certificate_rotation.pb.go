// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo-mesh/api/certificates/v1/certificate_rotation.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible states in which a CertificateRotation can exist.
type CertificateRotationStatus_State int32

const (
	// The CertificateRotation has yet to be picked up by the management-plane.
	CertificateRotationStatus_PENDING CertificateRotationStatus_State = 0
	// The CertificateRotation is underway, both roots are set, and the new root is being propogated
	CertificateRotationStatus_ADDING_NEW_ROOT CertificateRotationStatus_State = 1
	// The CertificateRotation is underway again.
	// The initial verification is over, the traffic continues to work with both roots present.
	// Now the old root is being removed, and the new root is being propgated alone to the data-plane clusters
	CertificateRotationStatus_PROPOGATING_NEW_INTERMEDIATE CertificateRotationStatus_State = 2
	// The CertificateRotation is underway again.
	// Removing the old-root from all data-plane clusters
	CertificateRotationStatus_DELETING_OLD_ROOT CertificateRotationStatus_State = 3
	// Verifying connectivity between workloads, the workflow will not progress until connectivity has been verified.
	// This can either be manual or in the future automated
	CertificateRotationStatus_VERIFYING CertificateRotationStatus_State = 4
	// The rotation has finished, the new root has been propgated to all data-plane clusters, and traffic has
	// been verified for a 2nd time.
	CertificateRotationStatus_FINISHED CertificateRotationStatus_State = 5
	// Processing the certificate rotation workflow failed.
	CertificateRotationStatus_FAILED CertificateRotationStatus_State = 6
)

// Enum value maps for CertificateRotationStatus_State.
var (
	CertificateRotationStatus_State_name = map[int32]string{
		0: "PENDING",
		1: "ADDING_NEW_ROOT",
		2: "PROPOGATING_NEW_INTERMEDIATE",
		3: "DELETING_OLD_ROOT",
		4: "VERIFYING",
		5: "FINISHED",
		6: "FAILED",
	}
	CertificateRotationStatus_State_value = map[string]int32{
		"PENDING":                      0,
		"ADDING_NEW_ROOT":              1,
		"PROPOGATING_NEW_INTERMEDIATE": 2,
		"DELETING_OLD_ROOT":            3,
		"VERIFYING":                    4,
		"FINISHED":                     5,
		"FAILED":                       6,
	}
)

func (x CertificateRotationStatus_State) Enum() *CertificateRotationStatus_State {
	p := new(CertificateRotationStatus_State)
	*p = x
	return p
}

func (x CertificateRotationStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateRotationStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_enumTypes[0].Descriptor()
}

func (CertificateRotationStatus_State) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_enumTypes[0]
}

func (x CertificateRotationStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateRotationStatus_State.Descriptor instead.
func (CertificateRotationStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_rawDescGZIP(), []int{1, 0}
}

type CertificateRotationSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VirtualMesh which you would like to rotate the Certificate for.
	VirtualMesh *v1.ObjectRef `protobuf:"bytes,1,opt,name=virtual_mesh,json=virtualMesh,proto3" json:"virtual_mesh,omitempty"`
	// The source of the new certificate, this will vary depending on the type of root CA the VirtualMesh
	// employs. Currently only provided and generated rootCA can be rotated.
	//
	// Types that are assignable to NewRootCaSource:
	//	*CertificateRotationSpec_NewRootCaSecret
	NewRootCaSource isCertificateRotationSpec_NewRootCaSource `protobuf_oneof:"new_root_ca_source"`
}

func (x *CertificateRotationSpec) Reset() {
	*x = CertificateRotationSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateRotationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateRotationSpec) ProtoMessage() {}

func (x *CertificateRotationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateRotationSpec.ProtoReflect.Descriptor instead.
func (*CertificateRotationSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_rawDescGZIP(), []int{0}
}

func (x *CertificateRotationSpec) GetVirtualMesh() *v1.ObjectRef {
	if x != nil {
		return x.VirtualMesh
	}
	return nil
}

func (m *CertificateRotationSpec) GetNewRootCaSource() isCertificateRotationSpec_NewRootCaSource {
	if m != nil {
		return m.NewRootCaSource
	}
	return nil
}

func (x *CertificateRotationSpec) GetNewRootCaSecret() *v1.ObjectRef {
	if x, ok := x.GetNewRootCaSource().(*CertificateRotationSpec_NewRootCaSecret); ok {
		return x.NewRootCaSecret
	}
	return nil
}

type isCertificateRotationSpec_NewRootCaSource interface {
	isCertificateRotationSpec_NewRootCaSource()
}

type CertificateRotationSpec_NewRootCaSecret struct {
	// Reference to a secret containing the new root_ca.
	NewRootCaSecret *v1.ObjectRef `protobuf:"bytes,2,opt,name=new_root_ca_secret,json=newRootCaSecret,proto3,oneof"`
}

func (*CertificateRotationSpec_NewRootCaSecret) isCertificateRotationSpec_NewRootCaSource() {}

type CertificateRotationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The most recent generation observed in the the CertificateRotation metadata.
	// If the `observedGeneration` does not match `metadata.generation`, the issuer has not processed the most
	// recent version of this request.
	ObservedGeneration int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// Any error observed which prevented the CertificateRotation from being processed.
	// If the error is empty, the request has been processed successfully
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The current state of the CertificateRotation workflow reported by the issuer.
	State CertificateRotationStatus_State `protobuf:"varint,3,opt,name=state,proto3,enum=certificates.mesh.gloo.solo.io.CertificateRotationStatus_State" json:"state,omitempty"`
	// A list of all conditions which have occured
	// Examples of reported events may be individual meshes which have been properly rotated.
	Conditions []*CertificateRotationStatus_Condition `protobuf:"bytes,4,rep,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *CertificateRotationStatus) Reset() {
	*x = CertificateRotationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateRotationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateRotationStatus) ProtoMessage() {}

func (x *CertificateRotationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateRotationStatus.ProtoReflect.Descriptor instead.
func (*CertificateRotationStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_rawDescGZIP(), []int{1}
}

func (x *CertificateRotationStatus) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *CertificateRotationStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CertificateRotationStatus) GetState() CertificateRotationStatus_State {
	if x != nil {
		return x.State
	}
	return CertificateRotationStatus_PENDING
}

func (x *CertificateRotationStatus) GetConditions() []*CertificateRotationStatus_Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

// Condition represents a snapshot of the state of the CertificateRotation at a given point in time.
type CertificateRotationStatus_Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastTransitionTime string `protobuf:"bytes,1,opt,name=last_transition_time,json=lastTransitionTime,proto3" json:"last_transition_time,omitempty"`
	LastUpdateTime     string `protobuf:"bytes,2,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	// Human readable message about condition
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// State observed during condition
	State CertificateRotationStatus_State `protobuf:"varint,4,opt,name=state,proto3,enum=certificates.mesh.gloo.solo.io.CertificateRotationStatus_State" json:"state,omitempty"`
}

func (x *CertificateRotationStatus_Condition) Reset() {
	*x = CertificateRotationStatus_Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateRotationStatus_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateRotationStatus_Condition) ProtoMessage() {}

func (x *CertificateRotationStatus_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateRotationStatus_Condition.ProtoReflect.Descriptor instead.
func (*CertificateRotationStatus_Condition) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CertificateRotationStatus_Condition) GetLastTransitionTime() string {
	if x != nil {
		return x.LastTransitionTime
	}
	return ""
}

func (x *CertificateRotationStatus_Condition) GetLastUpdateTime() string {
	if x != nil {
		return x.LastUpdateTime
	}
	return ""
}

func (x *CertificateRotationStatus_Condition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CertificateRotationStatus_Condition) GetState() CertificateRotationStatus_State {
	if x != nil {
		return x.State
	}
	return CertificateRotationStatus_PENDING
}

var File_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_rawDesc = []byte{
	0x0a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69,
	0x6f, 0x2f, 0x73, 0x6b, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65,
	0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3f, 0x0a,
	0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x52, 0x0b, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x4b,
	0x0a, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x52,
	0x6f, 0x6f, 0x74, 0x43, 0x61, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x6e,
	0x65, 0x77, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x87, 0x05, 0x0a, 0x19, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2f, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0xd8, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x8b, 0x01,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4e,
	0x45, 0x57, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x52, 0x4f,
	0x50, 0x4f, 0x47, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x4c, 0x44, 0x5f, 0x52, 0x4f, 0x4f, 0x54,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x49, 0x4e, 0x47, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x42, 0x4c, 0x5a, 0x46, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69,
	0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2f, 0x76, 0x31, 0xc0, 0xf5, 0x04, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_rawDescData = file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_goTypes = []interface{}{
	(CertificateRotationStatus_State)(0),        // 0: certificates.mesh.gloo.solo.io.CertificateRotationStatus.State
	(*CertificateRotationSpec)(nil),             // 1: certificates.mesh.gloo.solo.io.CertificateRotationSpec
	(*CertificateRotationStatus)(nil),           // 2: certificates.mesh.gloo.solo.io.CertificateRotationStatus
	(*CertificateRotationStatus_Condition)(nil), // 3: certificates.mesh.gloo.solo.io.CertificateRotationStatus.Condition
	(*v1.ObjectRef)(nil),                        // 4: core.skv2.solo.io.ObjectRef
}
var file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_depIdxs = []int32{
	4, // 0: certificates.mesh.gloo.solo.io.CertificateRotationSpec.virtual_mesh:type_name -> core.skv2.solo.io.ObjectRef
	4, // 1: certificates.mesh.gloo.solo.io.CertificateRotationSpec.new_root_ca_secret:type_name -> core.skv2.solo.io.ObjectRef
	0, // 2: certificates.mesh.gloo.solo.io.CertificateRotationStatus.state:type_name -> certificates.mesh.gloo.solo.io.CertificateRotationStatus.State
	3, // 3: certificates.mesh.gloo.solo.io.CertificateRotationStatus.conditions:type_name -> certificates.mesh.gloo.solo.io.CertificateRotationStatus.Condition
	0, // 4: certificates.mesh.gloo.solo.io.CertificateRotationStatus.Condition.state:type_name -> certificates.mesh.gloo.solo.io.CertificateRotationStatus.State
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_init() }
func file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_init() {
	if File_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateRotationSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateRotationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateRotationStatus_Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*CertificateRotationSpec_NewRootCaSecret)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto = out.File
	file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_api_certificates_v1_certificate_rotation_proto_depIdxs = nil
}

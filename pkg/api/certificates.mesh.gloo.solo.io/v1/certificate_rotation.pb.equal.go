// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo-mesh/api/certificates/v1/certificate_rotation.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *CertificateRotationSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CertificateRotationSpec)
	if !ok {
		that2, ok := that.(CertificateRotationSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetVirtualMesh()).(equality.Equalizer); ok {
		if !h.Equal(target.GetVirtualMesh()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetVirtualMesh(), target.GetVirtualMesh()) {
			return false
		}
	}

	switch m.NewRootCaSource.(type) {

	case *CertificateRotationSpec_NewRootCaSecret:
		if _, ok := target.NewRootCaSource.(*CertificateRotationSpec_NewRootCaSecret); !ok {
			return false
		}

		if h, ok := interface{}(m.GetNewRootCaSecret()).(equality.Equalizer); ok {
			if !h.Equal(target.GetNewRootCaSecret()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetNewRootCaSecret(), target.GetNewRootCaSecret()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.NewRootCaSource != target.NewRootCaSource {
			return false
		}
	}

	return true
}

// Equal function
func (m *CertificateRotationStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CertificateRotationStatus)
	if !ok {
		that2, ok := that.(CertificateRotationStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetObservedGeneration() != target.GetObservedGeneration() {
		return false
	}

	if strings.Compare(m.GetError(), target.GetError()) != 0 {
		return false
	}

	if m.GetState() != target.GetState() {
		return false
	}

	if len(m.GetConditions()) != len(target.GetConditions()) {
		return false
	}
	for idx, v := range m.GetConditions() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetConditions()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetConditions()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *CertificateRotationStatus_Condition) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CertificateRotationStatus_Condition)
	if !ok {
		that2, ok := that.(CertificateRotationStatus_Condition)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetLastTransitionTime(), target.GetLastTransitionTime()) != 0 {
		return false
	}

	if strings.Compare(m.GetLastUpdateTime(), target.GetLastUpdateTime()) != 0 {
		return false
	}

	if strings.Compare(m.GetMessage(), target.GetMessage()) != 0 {
		return false
	}

	if m.GetState() != target.GetState() {
		return false
	}

	return true
}

// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo-mesh/api/enterprise/networking/v1beta1/certificate_verification.proto

package v1beta1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"

	v1 "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)

	_ = v1.CertificateRotationState(0)
)

// Equal function
func (m *CertificateVerificationSpec) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CertificateVerificationSpec)
	if !ok {
		that2, ok := that.(CertificateVerificationSpec)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetStep() != target.GetStep() {
		return false
	}

	if m.GetAction() != target.GetAction() {
		return false
	}

	if h, ok := interface{}(m.GetVirtualMesh()).(equality.Equalizer); ok {
		if !h.Equal(target.GetVirtualMesh()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetVirtualMesh(), target.GetVirtualMesh()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *CertificateVerificationStatus) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CertificateVerificationStatus)
	if !ok {
		that2, ok := that.(CertificateVerificationStatus)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetObservedGeneration() != target.GetObservedGeneration() {
		return false
	}

	if strings.Compare(m.GetError(), target.GetError()) != 0 {
		return false
	}

	if m.GetState() != target.GetState() {
		return false
	}

	return true
}

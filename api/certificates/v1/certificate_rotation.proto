syntax = "proto3";
package certificates.mesh.gloo.solo.io;
option go_package = "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1";

import "github.com/solo-io/skv2/api/core/v1/core.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;

message CertificateRotationSpec {
  // VirtualMesh which you would like to rotate the Certificate for.
  .core.skv2.solo.io.ObjectRef virtual_mesh = 1;

  // The source of the new certificate, this will vary depending on the type of root CA the VirtualMesh
  // employs. Currently only provided and generated rootCA can be rotated.
  oneof new_root_ca_source {
    // Reference to a secret containing the new root_ca.
    .core.skv2.solo.io.ObjectRef new_root_ca_secret = 2;
  }
}

message CertificateRotationStatus {

  // The most recent generation observed in the the CertificateRotation metadata.
  // If the `observedGeneration` does not match `metadata.generation`, the issuer has not processed the most
  // recent version of this request.
  int64 observed_generation = 1;

  // Any error observed which prevented the CertificateRotation from being processed.
  // If the error is empty, the request has been processed successfully
  string error = 2;

  // The current state of the CertificateRotation workflow reported by the issuer.
  State state = 3;

  // Possible states in which a CertificateRotation can exist.
  enum State {
      // The CertificateRotation has yet to be picked up by the management-plane.
      PENDING = 0;

      // The CertificateRotation is underway, both roots are set, and the new root is being propogated 
      ROTATING_MULTI_ROOT = 1;

      // The CertificateRotation is underway again.
      // The initial verification is over, the traffic continues to work with both roots present.
      // Now the old root is being removed, and the new root is being propgated alone to the data-plane clusters
      ROTATING_NEW_ROOT = 2;

      // Verifying connectivity between workloads, the workflow will not progress until connectivity has been verified.
      // This can either be manual or in the future automated
      VERIFYING = 3;

      // The rotation has finished, the new root has been propgated to all data-plane clusters, and traffic has
      // been verified for a 2nd time.
      FINISHED = 4;

      // Processing the certificate rotation workflow failed.
      FAILED = 5;
  }

  // Condition represents a snapshot of the state of the CertificateRotation at a given point in time.
  message Condition {
    string last_transition_time = 1;

    string last_update_time = 2;

    // Human readable message about condition
    string message = 3;

    // State observed during condition
    State state = 4;
  }


  // A list of all conditions which have occured
  // Examples of reported events may be individual meshes which have been properly rotated.
  repeated Condition conditions = 4;
}
